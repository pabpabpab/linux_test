sudo apt-get update - обновить пакеты
sudo apt-get install openssh-server - установить ssh-сервер
sudo systemctl status sshd - проверить что openssh поставился
ssh localhost - подключиться по ssh к localhost
ps aux - посмотреть процессы
pstree - посмотреть процессы в виде дерева
ip a - посмотреть ip_адрес_убунты
ssh ip_адрес_убунты - это делается в хостовой ОС - подключиться по ssh с хостовой к гостевой ОС
ssh логин_в_убунте@айпи_убунты - подключиться к какому-то пользователю

в настройках VB: сеть -> внутренняя сеть (подружить по сети хостовую и гостевую ОС)
=====================================================================


ИЗВЛЕЧЬ БЕНЕФИТЫ:

ssh логин_в_убунте@айпи_убунты 
(чтобы каждый раз не вводить пароль, и также это считается не особо безопасным, чтобы это исправить существуют ssh-ключи (пара двух ключей))

ssh-keygen - генерирует такую пару ключей (генерируются публичные и приватные ключи rsa key pair)
(приватный ключ называется id_rsa (можно нажать enter и имя файла останется предложенным))
(далее ввести пароль который будет защищать ключи, для простоты можно не вводить)

ls -la ~/.ssh/ - увидеть файлы ключей в своей домашней папке

cat ~/.ssh/id_rsa - вывести на экран содержимое ключа (приватный ключ)

cat ~/.ssh/id_rsa.pub - вывести на экран содержимое ключа (публичный ключ)

cp ~/.ssh/id_rsa ~/Desktop/ - в убунте скопировать приватный ключ на рабочий стол

cat ~/Desktop/id_rsa - можно вывести на экран содержимой ключа, далее копипастом создать файл в хостовой ОС

ls -la ~/Desktop/ - увидеть файл ключа


-------------------------
- когда соединяем по ssh домашний комп и удаленную убунту, то в убунте храним публичный ключ, а в домашнем компе приватный ключ.
- когда через ssh-клиент соединяем удаленную убунту и гитхаб, то в гитхабе указываем публичный ключ, а приватный ключ храним в убунте вот здесь ~/.ssh/id_rsa
-------------------------



теперь чтобы подключится к системе убунты из хостовой ОС делаем: 
ssh логин_в_убунте@айпи_убунты -i абсолютный_путь_к_файлу_приватного_ключа_в_хостовой_ОС

(ssh alexp@192.168.1.5 -i D:\_GeekBrains\linux\id_rsa.txt)




(далее попросит пароль потому что публичная версия ключа не добавлена в список авторизованных ключей)

посмотреть файлик со списком в убунте
vi /etc/ssh/sshd_config



в убунте копируем публичный ключ в авторизованные ключи: 
называется он .ssh/authorized_keys (этот файлик должен быть создан в папке ssh)
cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys (в этот файл нужно публичную копию ключа засунуть, просто копируем)



делаем еще раз это: 
подключится к системе убунты из хостовой ОС делаем: 
ssh alexp@192.168.1.5 -i D:\_GeekBrains\linux\id_rsa.txt

вкратце:
1) ssh-keygen (сгенерит ключи в ~/.ssh/)
2) приватный ключ копируем в хостовую ОС
3) копируем значение публичного ключа в ~/.ssh/authorized_keys (потом можно посмотреть его cat ~/.ssh/authorized_keys и его cat ~/.ssh/id_rsa.pub, видим что одинаковые)



-------------------------
(ssh alexp@192.168.1.5 -i D:\_GeekBrains\linux\id_rsa.txt)
(так как у меня Windows 7, я не нашел ssh-клиента, в котором можно было бы сразу ввести эту команду с ключом. Взял Putty, в нем есть возможность авторизации по ключу, указал в настройках вышеуказанный личный ключ, вхожу, ошибка что файл ключей не годится, прочитал в инете что Putty не умеет работать с ключами сгенеррированными ssh-keygen'ом, но putty работает с ключами сгенерированными Puttygen. Сгенерил этой прогой пару ключей, сохранил редактором публичный ключ в ~/.ssh/authorized_keys, указал в настройках Putty путь к личному ключу, ... все работает, вхожу в Убунту по ssh без ввода пароля)
-------------------------









===============================================================================
ЭТО ВСЕ НУЖНО БЫЛО ЧТОБЫ использовать ssh-ключ при авторизации в github'е

- у себя в гитхабе в правом верхнем углу в выпадающем меню Настройки -> SSH и GPG ключи , добавить публичную версию своего ssh-ключа (публичную ключ можем раздавать кому угодно, а приватный ключ храним в секрете)

- Настройки -> SSH и GPG ключи - здесь пишем имя ключа my-ssh-key (например) и ниже содержимое самого публичного ключа (его значение)

и теперь когда я хочу склонировать репозиторий к себе на машину я могу использовать гит-соединение, и клонируется он командой (в ssh-клиенте подключенным к убунте): 
git clone git@github.com:логин/имя_репо.git (git clone git@github.com:pabpabpab/linux_test.git)
(предварительно устанавливаем гит через ссш-клиент в убунту: sudo apt install git)

ls -la (в домашней паке увидим репо)
cd linux_test/
ls -la
cat .git_ignore

создаем ветку
git checkout -b имя_ветки (она создается только локально)
посмотреть ветки
git branch
переключаемся между существующими ветками  
git checkout имя_ветки
 
ветка командой git checkout -b имя_ветки - создается только локально,
чтобы отправить ее на сервер делаем 
git push
привязать локальную ветку к удаленой
git push --set-upstream origin branch1 (локальная ветка будет трекать удаленную)

(на сайте гитхаба проверить одинаковые ли хэши у ветки мастер и ветки созданной только что от мастер (справа в тайтле ветки))



для проверки в репо в убунте сделаем какие-нибудь изменения (создадим файлик touch hw2.txt)
(или скопировать
scp D:\_GeekBrains\linux\hw2.txt alexp@192.168.1.5:/home/alexp/linux_test/hw2.txt)


посмотреть его ls -la


посмотреть файлик новый
git status

добавить новый файл в отслеживаемые (кажется это делается всегда после изменений)
git add имя_файла 







отправить этот файл в подтвержденные изменения
git commit -m 'комментарий'
(
предварительно конфигим комит 
git config --global user.email "емайл_свой"
git config --global user.name "имя свое, просто имя"
)


то есть необходимый минимум чтобы сделать локальные изменения и отправить их на сервер (это все в ссш-клиенте):
- создали файл
- добавили в отслеживаемые
- и комитим изменения 


- делаем git push чтобы отправить изменения на удаленный сервер



потом делаем на сайте гитхаба пулреквест.

после проверки преподавателем делаем мёрж ветки в мастер и удаляем ветку.




еще пару команд в качестве факультатива
---------------------------------
клонировать репо в другую папку 
git clone git@github.com:логин/имя_репо.git имя_папки (git clone git@github.com:pabpabpab/linux_test.git linux_test2/)

показать все удаленные ветки (без --all показывает только локальные ветки)
git branch --all 

посмотреть какие есть подключения
git remote -vv
-------------------------------